package larva;


import main.Bank;
import main.User;
import main.Account;

import java.util.LinkedHashMap;
import java.io.PrintWriter;

public class _cls_StudentBank0 implements _callable{

public static PrintWriter pw; 
public static _cls_StudentBank0 root;

public static LinkedHashMap<_cls_StudentBank0,_cls_StudentBank0> _cls_StudentBank0_instances = new LinkedHashMap<_cls_StudentBank0,_cls_StudentBank0>();
static{
try{
RunningClock.start();
pw = new PrintWriter("C:\\Users\\farad\\Documents\\software testing\\CPS3230-Assignment2\\RuntimeVerification/src/output_StudentBank.txt");

root = new _cls_StudentBank0();
_cls_StudentBank0_instances.put(root, root);
  root.initialisation();
}catch(Exception ex)
{ex.printStackTrace();}
}

_cls_StudentBank0 parent; //to remain null - this class does not have a parent!
int no_automata = 1;
 public int noOfUsers =0 ;

public static void initialize(){}
//inheritance could not be used because of the automatic call to super()
//when the constructor is called...we need to keep the SAME parent if this exists!

public _cls_StudentBank0() {
}

public void initialisation() {
}

public static _cls_StudentBank0 _get_cls_StudentBank0_inst() { synchronized(_cls_StudentBank0_instances){
 return root;
}
}

public boolean equals(Object o) {
 if ((o instanceof _cls_StudentBank0))
{return true;}
else
{return false;}
}

public int hashCode() {
return 0;
}

public void _call(String _info, int... _event){
synchronized(_cls_StudentBank0_instances){
_performLogic_Users(_info, _event);
}
}

public void _call_all_filtered(String _info, int... _event){

_cls_StudentBank1[] a1 = new _cls_StudentBank1[1];
synchronized(_cls_StudentBank1._cls_StudentBank1_instances){
a1 = _cls_StudentBank1._cls_StudentBank1_instances.keySet().toArray(a1);}
for (_cls_StudentBank1 _inst : a1)
if (_inst != null){
_inst._call(_info, _event); 
_inst._call_all_filtered(_info, _event);
}
}

public static void _call_all(String _info, int... _event){

_cls_StudentBank0[] a = new _cls_StudentBank0[1];
synchronized(_cls_StudentBank0_instances){
a = _cls_StudentBank0_instances.keySet().toArray(a);}
for (_cls_StudentBank0 _inst : a)

if (_inst != null) _inst._call(_info, _event);
}

public void _killThis(){
try{
if (--no_automata == 0){
synchronized(_cls_StudentBank0_instances){
_cls_StudentBank0_instances.remove(this);}
}
else if (no_automata < 0)
{throw new Exception("no_automata < 0!!");}
}catch(Exception ex){ex.printStackTrace();}
}

int _state_id_Users = 2;

public void _performLogic_Users(String _info, int... _event) {

_cls_StudentBank0.pw.println("[Users]AUTOMATON::> Users("+") STATE::>"+ _string_Users(_state_id_Users, 0));
_cls_StudentBank0.pw.flush();

if (0==1){}
else if (_state_id_Users==2){
		if (1==0){}
		else if ((_occurredEvent(_event,2/*deleteUser*/)) && (noOfUsers ==0 )){
		_cls_StudentBank0.pw .println ("BAD State!!!");

		_state_id_Users = 1;//moving to state badDelete
		_goto_Users(_info);
		}
		else if ((_occurredEvent(_event,0/*addUser*/)) && (noOfUsers ==5 )){
		noOfUsers ++;

		_state_id_Users = 0;//moving to state tooMany
		_goto_Users(_info);
		}
		else if ((_occurredEvent(_event,0/*addUser*/))){
		noOfUsers ++;

		_state_id_Users = 2;//moving to state start
		_goto_Users(_info);
		}
		else if ((_occurredEvent(_event,2/*deleteUser*/))){
		noOfUsers --;

		_state_id_Users = 2;//moving to state start
		_goto_Users(_info);
		}
}
else if (_state_id_Users==0){
		if (1==0){}
		else if ((_occurredEvent(_event,0/*addUser*/))){
		noOfUsers ++;
_cls_StudentBank0.pw .println ("Too many users already");

		_state_id_Users = 0;//moving to state tooMany
		_goto_Users(_info);
		}
		else if ((_occurredEvent(_event,2/*deleteUser*/)) && (noOfUsers >6 )){
		noOfUsers --;

		_state_id_Users = 0;//moving to state tooMany
		_goto_Users(_info);
		}
		else if ((_occurredEvent(_event,2/*deleteUser*/)) && (noOfUsers ==6 )){
		noOfUsers --;

		_state_id_Users = 2;//moving to state start
		_goto_Users(_info);
		}
}
}

public void _goto_Users(String _info){
_cls_StudentBank0.pw.println("[Users]MOVED ON METHODCALL: "+ _info +" TO STATE::> " + _string_Users(_state_id_Users, 1));
_cls_StudentBank0.pw.flush();
}

public String _string_Users(int _state_id, int _mode){
switch(_state_id){
case 2: if (_mode == 0) return "start"; else return "start";
case 0: if (_mode == 0) return "tooMany"; else return "!!!SYSTEM REACHED BAD STATE!!! tooMany "+new _BadStateExceptionStudentBank().toString()+" ";
case 1: if (_mode == 0) return "badDelete"; else return "!!!SYSTEM REACHED BAD STATE!!! badDelete "+new _BadStateExceptionStudentBank().toString()+" ";
default: return "!!!SYSTEM REACHED AN UNKNOWN STATE!!!";
}
}

public boolean _occurredEvent(int[] _events, int event){
for (int i:_events) if (i == event) return true;
return false;
}
}